{
  "name": "product-management-system",
  "version": "1.0.0",
  "description": "Event-driven microservices product management system",
  "private": true,
  "scripts": {
    "dev": "npm run dev:all",
    "dev:all": "concurrently \"npm run dev:infrastructure\" \"npm run dev:services\" \"npm run dev:frontend\"",
    "dev:infrastructure": "docker-compose up -d postgres zookeeper kafka kafka-ui dynamodb minio",
    "dev:services": "concurrently \"npm run dev:core\" \"npm run dev:analytics\" \"npm run dev:notification\"",
    "dev:core": "cd backend/core-service && export PATH=\"/opt/homebrew/bin:$PATH\" && npm run dev",
    "dev:analytics": "cd backend/analytics-service && export PATH=\"/opt/homebrew/bin:$PATH\" && npm run dev",
    "dev:notification": "cd backend/notification-service && export PATH=\"/opt/homebrew/bin:$PATH\" && npm run dev",
    "dev:frontend": "cd frontend/product-dashboard && npm run dev -- --port 3002",
    "start": "npm run start:all",
    "start:all": "concurrently \"npm run start:infrastructure\" \"npm run start:services\" \"npm run start:frontend\"",
    "start:infrastructure": "docker-compose up -d",
    "start:services": "concurrently \"npm run start:core\" \"npm run start:analytics\" \"npm run start:notification\"",
    "start:core": "cd backend/core-service && npm start",
    "start:analytics": "cd backend/analytics-service && npm start",
    "start:notification": "cd backend/notification-service && npm start",
    "start:frontend": "cd frontend/product-dashboard && npm start -- --port 3002",
    "build": "npm run build:all",
    "build:all": "npm run build:services && npm run build:frontend",
    "build:services": "concurrently \"npm run build:core\" \"npm run build:analytics\" \"npm run build:notification\"",
    "build:core": "cd backend/core-service && npm run build",
    "build:analytics": "cd backend/analytics-service && npm run build",
    "build:notification": "cd backend/notification-service && npm run build",
    "build:frontend": "cd frontend/product-dashboard && npm run build",
    "install:all": "npm run install:services && npm run install:frontend",
    "install:services": "concurrently \"npm run install:core\" \"npm run install:analytics\" \"npm run install:notification\"",
    "install:core": "cd backend/core-service && npm install",
    "install:analytics": "cd backend/analytics-service && npm install",
    "install:notification": "cd backend/notification-service && npm install",
    "install:frontend": "cd frontend/product-dashboard && npm install",
    "test": "npm run test:all",
    "test:all": "concurrently \"npm run test:core\" \"npm run test:analytics\" \"npm run test:notification\" \"npm run test:frontend\"",
    "test:core": "cd backend/core-service && npm test",
    "test:analytics": "cd backend/analytics-service && npm test",
    "test:notification": "cd backend/notification-service && npm test",
    "test:frontend": "cd frontend/product-dashboard && npm test",
    "setup": "npm run setup:env && npm run install:all && npm run setup:infrastructure",
    "setup:env": "cp env.example .env",
    "setup:infrastructure": "docker-compose up -d postgres zookeeper kafka kafka-ui dynamodb minio && npm run setup:analytics",
    "setup:analytics": "cd backend/analytics-service && export PATH=\"/opt/homebrew/bin:$PATH\" && npm run setup-db",
    "stop": "docker-compose down",
    "clean": "docker-compose down -v && docker system prune -f",
    "logs": "docker-compose logs -f",
    "logs:core": "cd backend/core-service && npm run dev",
    "logs:analytics": "cd backend/analytics-service && npm run dev",
    "logs:notification": "cd backend/notification-service && npm run dev",
    "health": "concurrently \"curl -s http://localhost:3000/api/health\" \"curl -s http://localhost:3001/api/health\" \"curl -s http://localhost:3003/api/health\""
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "keywords": [
    "microservices",
    "event-driven",
    "kafka",
    "typescript",
    "react",
    "product-management"
  ],
  "author": "Chamith Jayathilaka",
  "license": "MIT",
  "workspaces": [
    "backend/core-service",
    "backend/analytics-service",
    "backend/notification-service",
    "frontend/product-dashboard"
  ]
}

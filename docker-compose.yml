version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}
      KAFKA_JMX_HOSTNAME: ${KAFKA_JMX_HOSTNAME}
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8081}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTERS_0_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  # DynamoDB Local
  dynamodb:
    image: amazon/dynamodb-local:2.0.0
    container_name: dynamodb
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    networks:
      - app-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  # Core Service (Product Management API)
  core-service:
    build:
      context: ./backend/core-service
      dockerfile: Dockerfile
    container_name: core-service
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${CORE_SERVICE_PORT}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - postgres
      - kafka
    networks:
      - app-network
      - kafka-network
    volumes:
      - ./backend/core-service:/app
      - /app/node_modules

  # Analytics Service
  analytics-service:
    build:
      context: ./backend/analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${ANALYTICS_SERVICE_PORT}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DYNAMODB_TABLE_NAME: ${DYNAMODB_TABLE_NAME}
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      S3_ENDPOINT: http://minio:9000
      S3_HISTORICAL_BUCKET: ${S3_HISTORICAL_BUCKET}
      S3_ARCHIVE_BUCKET: ${S3_ARCHIVE_BUCKET}
      KAFKA_BROKERS: kafka:29092
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID_ANALYTICS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - kafka
      - dynamodb
      - minio
    networks:
      - app-network
      - kafka-network
    volumes:
      - ./backend/analytics-service:/app
      - /app/node_modules

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${NOTIFICATION_SERVICE_PORT}
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - kafka
    networks:
      - app-network
      - kafka-network
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules

  # Frontend Dashboard
  product-dashboard:
    build:
      context: ./frontend/product-dashboard
      dockerfile: Dockerfile
    container_name: product-dashboard
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_URL: http://localhost:3000
      VITE_NOTIFICATION_URL: http://localhost:3001
    depends_on:
      - core-service
      - notification-service
    networks:
      - app-network
    volumes:
      - ./frontend/product-dashboard:/app
      - /app/node_modules

volumes:
  postgres_data:
  minio_data:

networks:
  kafka-network:
    driver: bridge
  app-network:
    driver: bridge
